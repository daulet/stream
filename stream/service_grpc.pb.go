// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package stream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransformerClient is the client API for Transformer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransformerClient interface {
	Generate(ctx context.Context, in *Request, opts ...grpc.CallOption) (Transformer_GenerateClient, error)
}

type transformerClient struct {
	cc grpc.ClientConnInterface
}

func NewTransformerClient(cc grpc.ClientConnInterface) TransformerClient {
	return &transformerClient{cc}
}

func (c *transformerClient) Generate(ctx context.Context, in *Request, opts ...grpc.CallOption) (Transformer_GenerateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Transformer_ServiceDesc.Streams[0], "/stream.Transformer/Generate", opts...)
	if err != nil {
		return nil, err
	}
	x := &transformerGenerateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Transformer_GenerateClient interface {
	Recv() (*Generation, error)
	grpc.ClientStream
}

type transformerGenerateClient struct {
	grpc.ClientStream
}

func (x *transformerGenerateClient) Recv() (*Generation, error) {
	m := new(Generation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransformerServer is the server API for Transformer service.
// All implementations must embed UnimplementedTransformerServer
// for forward compatibility
type TransformerServer interface {
	Generate(*Request, Transformer_GenerateServer) error
	mustEmbedUnimplementedTransformerServer()
}

// UnimplementedTransformerServer must be embedded to have forward compatible implementations.
type UnimplementedTransformerServer struct {
}

func (UnimplementedTransformerServer) Generate(*Request, Transformer_GenerateServer) error {
	return status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedTransformerServer) mustEmbedUnimplementedTransformerServer() {}

// UnsafeTransformerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransformerServer will
// result in compilation errors.
type UnsafeTransformerServer interface {
	mustEmbedUnimplementedTransformerServer()
}

func RegisterTransformerServer(s grpc.ServiceRegistrar, srv TransformerServer) {
	s.RegisterService(&Transformer_ServiceDesc, srv)
}

func _Transformer_Generate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransformerServer).Generate(m, &transformerGenerateServer{stream})
}

type Transformer_GenerateServer interface {
	Send(*Generation) error
	grpc.ServerStream
}

type transformerGenerateServer struct {
	grpc.ServerStream
}

func (x *transformerGenerateServer) Send(m *Generation) error {
	return x.ServerStream.SendMsg(m)
}

// Transformer_ServiceDesc is the grpc.ServiceDesc for Transformer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transformer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream.Transformer",
	HandlerType: (*TransformerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Generate",
			Handler:       _Transformer_Generate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
